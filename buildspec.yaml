# version: 0.2
# phases:
#   pre_build:
#     commands:
#       - echo Logging in to Amazon ECR...
#       - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
#       - IMAGE_TAG=$(date +%Y%m%d%H%M%S)  # Auto-incremented version tag
#       - echo $IMAGE_TAG
#   build:
#     commands:
#       - echo Building the Docker image...
#       - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
#       - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG 
#   post_build:
#     commands:
#       - echo Pushing the Docker image...
#       - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
#       - echo Writing image definitions...
#       - printf '[{"name":"todo-app-container","imageUri":"%s"}]' $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG > imagedefinitions.json
# artifacts:
#   files: imagedefinitions.json


# version: 0.2
# env:
#   variables:
#     AWS_ACCOUNT_ID: "965080479351"  # Replace with your AWS Account ID
#     AWS_DEFAULT_REGION: "ap-southeast-1"  # Replace with your desired region
#     IMAGE_REPO_NAME: "nodejs-todoapp"
#     ECS_CLUSTER: "todo-app-cluster"  # Add your ECS cluster name here if not provided in the CodeBuild environment settings.
#     SERVICE_NAME: "todo-app-service"  
# phases:
#   pre_build:
#     commands:
#       - echo Logging in to Amazon ECR...
#       - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
#       - IMAGE_TAG=$(date +%Y%m%d%H%M%S)  # Auto-incremented version tag
#       - echo $IMAGE_TAG
#   build:
#     commands:
#       - echo Building the Docker image...
#       - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
#       - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG 
#   post_build:
#     commands:
#       - echo Pushing the Docker image...
#       - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
#       - echo Writing image definitions...
#       - printf '[{"name":"todo-app-container","imageUri":"%s"}]' $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG > imagedefinitions.json
#       - echo Creating ECS Task Definition...
#       - >
#         TASK_DEFINITION=$(cat <<EOF
#         {
#           "family": "todo-app-task",
#           "containerDefinitions": [
#             {
#               "name": "todo-app-container",
#               "image": "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG",
#               "essential": true,
#               "memory": 128,  # Smallest possible memory size (MB)
#               "cpu": 128,     # Smallest possible CPU size (units)
#               "portMappings": [
#                 {
#                   "containerPort": 3000,
#                   "hostPort": 0,   # Auto-assign host port
#                   "protocol": "tcp"
#                 }
#               ]
#             }
#           ]
#         }
#         EOF
#         )
#       - echo Registering ECS Task Definition...
#       - echo $TASK_DEFINITION > task-definition.json
#       - aws ecs register-task-definition --cli-input-json file://task-definition.json

#       - echo Updating ECS Service with new task definition...
#       - NEW_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition todo-app-task --query "taskDefinition.taskDefinitionArn" --output text)
#       - echo $NEW_TASK_DEF_ARN
#       - aws ecs update-service --cluster $ECS_CLUSTER --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN --force-new-deployment
    
# artifacts:
#   files:
#     - imagedefinitions.json
#     - task-definition.json


version: 0.2
env:
  variables:
    AWS_ACCOUNT_ID: "965080479351"
    AWS_DEFAULT_REGION: "ap-southeast-1"
    IMAGE_REPO_NAME: "nodejs-todoapp"
    ECS_CLUSTER: "todo-app-cluster"
    SERVICE_NAME: "todo-app-service"
    DESIRED_COUNT: 1  # Number of tasks to run in the service
phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - IMAGE_TAG=$(date +%Y%m%d%H%M%S)
      - echo $IMAGE_TAG
  build:
    commands:
      - echo Building the Docker image...
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG 
  post_build:
    commands:
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - echo Writing image definitions...
      - printf '[{"name":"todo-app-container","imageUri":"%s"}]' $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG > imagedefinitions.json
      - echo Preparing task definition file...
      - cp task-definition.json task-definition-temp.json
      - sed -i "s|\$AWS_ACCOUNT_ID|$AWS_ACCOUNT_ID|g" task-definition-temp.json
      - sed -i "s|\$AWS_DEFAULT_REGION|$AWS_DEFAULT_REGION|g" task-definition-temp.json
      - sed -i "s|\$IMAGE_REPO_NAME|$IMAGE_REPO_NAME|g" task-definition-temp.json
      - sed -i "s|\$IMAGE_TAG|$IMAGE_TAG|g" task-definition-temp.json
      - echo Displaying contents of task-definition-temp.json for debugging:
      - cat task-definition-temp.json
      - echo Registering ECS Task Definition...
      - aws ecs register-task-definition --cli-input-json file://task-definition-temp.json
      - echo Retrieving new Task Definition ARN...
      - NEW_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition todo-app-task --query "taskDefinition.taskDefinitionArn" --output text)
      - echo $NEW_TASK_DEF_ARN
      - echo Checking if ECS service exists...
      - SERVICE_EXISTS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $SERVICE_NAME --query "services[0].serviceName" --output text)
      - if [ "$SERVICE_EXISTS" == "None" ]; then
          echo Creating new ECS service...
          aws ecs create-service --cluster $ECS_CLUSTER --service-name $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN --desired-count $DESIRED_COUNT --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[subnet-05e0b0459f829449b,subnet-0308d5b29833bac55,subnet-018f6699510ccb093],securityGroups=[sg-0b4eac0a57772cd31],assignPublicIp=ENABLED}";
        else
          echo Updating existing ECS service...
          aws ecs update-service --cluster $ECS_CLUSTER --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN --force-new-deployment;
        fi

artifacts:
  files:
    - imagedefinitions.json
    - task-definition-temp.json
